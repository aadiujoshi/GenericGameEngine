

    // public static Vector<Projectile> projectileCollision(Projectile p, Vector<Projectile> projectiles)
    // {
    //     for(Projectile op : projectiles)
    //     {
    //         if(p.getInitial().getVelocity().getVelocity() == 0){ //already hit an edge
    //             p.collision(op, true);
    //             continue;
    //         }

    //         int collisionType = p.collision(p, false);

    //         if(collisionType == Projectile.NO_COLLISION) continue;

    //         if(collisionType == Projectile.SIDE_COLLISION){
    //             p.setTime(0);
    //             p.setInitial(new InitialPoint(p.getX(), p.getY(), new texelgameengine.physics.Vector(0, 270)));
    //             continue;
    //         }

    //         if(collisionType == Projectile.FLOOR_COLLISION){
    //             p.setGrounded(true);
    //         }
    //     }
    //     return projectiles;
    // }


 // ArrayList<GameObject> blocks = new ArrayList<>();
        // ArrayList<GameObject> blocks2 = new ArrayList<>();
        // ArrayList<GameObject> blocks3 = new ArrayList<>();

        // for(int i = 0; i < 32; i++){
        //     GameObject go = new GameObject(1, 1, "dirt-block.png");
        //     go.setGrounded(true);
        //     blocks.add(go);
        // }

        // for(int i = 0; i < 32; i++){
        //     GameObject go = new GameObject(1, 1, "dirt-block.png");
        //     go.setGrounded(true);
        //     blocks2.add(go);
        // }

        // for(int i = 0; i < 32; i++){
        //     GameObject go = new GameObject(1, 1, "dirt-block.png");
        //     go.setGrounded(true);
        //     blocks3.add(go);
        // }

        // blocks.get(0).setTexture(TextureResourceLoader.getTexture("grass-block.png"));
        // blocks2.get(0).setTexture(TextureResourceLoader.getTexture("grass-block.png"));
        // blocks3.get(0).setTexture(TextureResourceLoader.getTexture("grass-block.png"));

        // GameChunk sc1 = GameChunkBuilder.buildChunk(blocks, 0, -32, 32);
        // GameChunk sc2 = GameChunkBuilder.buildChunk(blocks2, 1, -32, 32);
        // GameChunk sc3 = GameChunkBuilder.buildChunk(blocks3, -1, -32, 32);