package texelgameengine.game;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.Serializable;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import texelgameengine.graphics.Animation;
import texelgameengine.graphics.Camera;
import texelgameengine.graphics.GameUpdateEvent;
import texelgameengine.graphics.GameUpdateInvoker;
import texelgameengine.graphics.GameUpdateListener;
import texelgameengine.graphics.GraphicsEvent;
// import texelgameengine.graphics.LightPropagationEngine;
import texelgameengine.graphics.PaintableObject;
import texelgameengine.graphics.PaintableObjectInvoker;
import texelgameengine.physics.GameEntity;
import texelgameengine.world.GameMap;

public class GameWorld extends JPanel implements Serializable
{
    private JFrame frame;

    private String worldName;

    //force method access
    private static int NEXT_FREE_HASH_CODE = 1;

    private PaintableObjectInvoker paintObjectInvoker;
    private GameUpdateInvoker gameUpdateInvoker;

    private Vector<GameEntity> entities;
    private Vector<GameMap> maps;
    private GameMap loadedMap;
    private Camera camera;

    private double frameLocationX;
    private double frameLocationY;

    private boolean fullscreen;

    private double mouseX;
    private double mouseY;

    private Thread graphicsThread;
    private Thread gameUpdateHandlerThread;
    private Thread gameTickThread;

    private Vector<Thread> userThreads;

    public static boolean SHADERS;
    public static boolean DEBUGGING;

    private final float FPS = 1000;
    private float averageFPS;
    private final float DESIRED_TICK_SPEED = 1000; //determines how many times per second entity position is calculated
    private float tickSpeed99thPercent;

    //scrolling
    private int xOffset;
    private int yOffset;
    
    /**
     * This class handles all the frame updates and graphics calls (texture drawing), and GameObjects such as Projectiles,
     * and map chunks. Also has general GUI info such as mouse posistion. 
     */
    public GameWorld()
    {
        for(int i = 0; i < 15; i++){
            char c = (char)((int)(Math.random()*200)+33);
            if(c == '/' || c == '\\' || c == '<' || c == '>' || c == '*' || c == '?' || c == ':' || c == '"' || c == '|'){
                i--;
                continue;
            }
            worldName+=c;
        }

        this.entities = new Vector<GameEntity>();
        this.userThreads = new Vector<>();
        this.maps = new Vector<>();
        this.xOffset = 0;
        this.yOffset = 0;
        this.fullscreen = false;

        this.initWindow(500, 500);

        DEBUGGING = true;

        this.tickSpeed99thPercent = DESIRED_TICK_SPEED;
        this.averageFPS = FPS;

        this.paintObjectInvoker = new PaintableObjectInvoker();
        this.gameUpdateInvoker = new GameUpdateInvoker();

        this.graphicsThread = new Thread(new Runnable(){    
            public void run() {
                long startNanos;
                float tempAverageFPS = FPS;

                while(true){
                    startNanos = System.nanoTime();

                    repaint();

                    if(System.nanoTime() != startNanos)
                        tempAverageFPS = (int)(tempAverageFPS + 1000000000/(System.nanoTime()-startNanos))/2;
                    if(System.currentTimeMillis() % 1000 < 10) averageFPS = tempAverageFPS;
                }
            }
        });
        this.gameUpdateHandlerThread = new Thread(new Runnable(){
            public void run() {
                while(true) {
                    mouseX = MouseInfo.getPointerInfo().getLocation().getX() - frameLocationX;
                    mouseY = MouseInfo.getPointerInfo().getLocation().getY() - frameLocationY;

                    // Vector<GameUpdateListener> gul = gameUpdateInvoker.getGameUpdateListeners();

                    for(int i = 0; i < maps.size(); i++) {
                        if(maps.get(i).isLoaded())
                            loadedMap = maps.get(i);
                    }

                    for(int i = 0; i < entities.size(); i++){
                        if(entities.get(i).isExpired()) {
                            entities.remove(i);
                            i--;
                            continue;
                        }
                    }
                }
            }
        });

        this.gameTickThread = new Thread(new Runnable(){
            public void run(){
                long startNanos;
                long delayNanos = 0;
                // float tempAverageFPS = FPS;

                while(true) {
                    nanoDelay((long)(1000000000/DESIRED_TICK_SPEED)-delayNanos);
                    
                    startNanos = System.nanoTime();
                    
                    gameUpdateInvoker.dispatchGameUpdateListeners(new GameUpdateEvent(loadedMap, System.currentTimeMillis(), 1000/(DESIRED_TICK_SPEED)+(delayNanos/1000000), (int)mouseX, (int)mouseY));

                    delayNanos = System.nanoTime()-startNanos;
                    tickSpeed99thPercent = tickSpeed99thPercent < DESIRED_TICK_SPEED-(delayNanos/1000000) ? tickSpeed99thPercent : DESIRED_TICK_SPEED-(delayNanos/1000000);
                }
            }
        });

        //threads
        graphicsThread.start(); 
        gameUpdateHandlerThread.start();
        gameTickThread.start();
    }

    private void initWindow(int width, int height)
    {
        frame = new JFrame("Texel Game Engine");
        frame.setSize(width, height);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        this.setLayout(null);

        frame.add(this);
        frame.addComponentListener(new ComponentListener(){
            public void componentMoved(ComponentEvent e) {
                try{
                    frameLocationX = getLocationOnScreen().getX();
                    frameLocationY = getLocationOnScreen().getY(); 
                } catch(java.awt.IllegalComponentStateException i){}
            }
            public void componentResized(ComponentEvent e) {  
                try{
                    frameLocationX = getLocationOnScreen().getX();
                    frameLocationY = getLocationOnScreen().getY(); 
                } catch(java.awt.IllegalComponentStateException i) {}
            }
            public void componentHidden(ComponentEvent e) {}
            public void componentShown(ComponentEvent e) {}
        });

        frame.addKeyListener(new KeyListener(){
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == 122){ //f11
                    SwingUtilities.invokeLater(new Runnable(){
                        @Override
                        public void run(){
                            if(!fullscreen){
                                // frame.setUndecorated(true);
                                GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().setFullScreenWindow(frame);
                                fullscreen = true;
                            }
                            else if(fullscreen){
                                GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().setFullScreenWindow(null);
                                frame.setSize(500,500);
                                fullscreen = false;
                            }
                        }
                    });
                }
            }
            
            public void keyReleased(KeyEvent e) {}
            public void keyTyped(KeyEvent e) {}

        });

        frame.setVisible(true);
        
        this.frameLocationX = this.getLocationOnScreen().getX();
        this.frameLocationY = this.getLocationOnScreen().getY();

        frame.validate();
    }

    public void paintComponent(Graphics gr)
    {
        Graphics2D g = (Graphics2D)gr;

        if(camera == null){ System.out.println("no camera added"); return; }

        xOffset = (int)camera.getX();
        yOffset = (int)camera.getY();

        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);

        drawGameFrame(g);

        g.dispose();
    }

    /** 
     * Draws all Objects which implement the {@code PaintableObject} interface.
    */
    public void drawGameFrame(Graphics2D panelGraphics)
    {
        panelGraphics.setColor(Color.BLACK);
        panelGraphics.fillRect(0,0,this.getWidth(), this.getHeight());

        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();

        BufferedImage colorModel = new BufferedImage((int)screenDimension.getWidth(), (int)screenDimension.getHeight(), BufferedImage.TYPE_INT_ARGB);
        // float[][] shaderPercentageMap = new float[colorModel.getHeight()][colorModel.getWidth()];
        BufferedImage outputBuffer = new BufferedImage(colorModel.getWidth(), colorModel.getHeight(), BufferedImage.TYPE_INT_ARGB);

        Graphics2D colorModelGraphics = colorModel.createGraphics();
        Graphics2D outputBufferGraphics = outputBuffer.createGraphics();

        colorModelGraphics.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        colorModelGraphics.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);

        outputBufferGraphics.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        outputBufferGraphics.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);

        paintObjectInvoker.dispatchPaintableObjects(new GraphicsEvent((int)screenDimension.getWidth(), (int)screenDimension.getHeight(), xOffset, yOffset, System.currentTimeMillis(), colorModelGraphics));
        // shaderBuffer = LightPropagationEngine.createShaderBuffer(loadedMap);
        outputBufferGraphics.drawImage(colorModel, null, 0, 0);

        if(!fullscreen){
            Image scaledOutputImage = outputBuffer.getScaledInstance(getWidth(), getHeight(), Image.SCALE_DEFAULT);
            BufferedImage scaledOutputBuffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
            scaledOutputBuffer.getGraphics().drawImage(scaledOutputImage, 0, 0, null);
            panelGraphics.drawImage(scaledOutputBuffer, null, 0, 0);
        }
        else
            panelGraphics.drawImage(outputBuffer, null, 0, 0);

        if(DEBUGGING)
        {
            panelGraphics.setColor(Color.LIGHT_GRAY);
            panelGraphics.setFont(new Font("Arial", Font.BOLD, 10));
            // panelGraphics.fillRect(0, 0, 160, 20);
            // panelGraphics.fillRect(0, 20, 160, 20);
            // panelGraphics.fillRect(0, 40, 160, 20);
            panelGraphics.setColor(Color.WHITE);
            panelGraphics.drawString("AVG FPS: " + averageFPS, 2, 0+15);
            panelGraphics.drawString("99% TICKS PER SECOND: " + tickSpeed99thPercent, 2, 20+15);
            panelGraphics.drawString("ENTITY COUNT: " + entities.size(), 2, 40+15);
        }
        // panelGraphics.dispose();
        // colorModelGraphics.dispose();
        // outputBufferGraphics.dispose();
    }

    /**
     * Converts cartesian x and y coordinates to screenspace coordinates with a GraphicsEvent context.
     * Used easy translation to display objects. Cartesian origin (0,0) is centered on the screen,.
     */
    public static Point toScreenSpace(int x, int y, GraphicsEvent e){
        int cx = (e.getScreenWidth()/2)+x-e.getXOffset();
        int cy = (e.getScreenHeight()/2)-y+e.getYOffset();
        
        return new Point(cx, cy);
    }

    public GraphicsEvent getGraphicsEvent(){
        return new GraphicsEvent(this.getWidth(), this.getHeight(), this.xOffset, this.yOffset, System.currentTimeMillis(), (Graphics2D)super.getGraphics());
    }

    public static void nanoDelay(long nanos)
    {
        if(nanos < 0) return;
        final long end = System.nanoTime() + nanos;
        long timeLeft = nanos;
        do {
            timeLeft = end - System.nanoTime();
        } while (timeLeft > 0);
    }

    public JFrame getFrame() { return this.frame; }
    public JPanel getPanel() { return this; }
    public Vector<GameEntity> getProjectiles() { return this.entities; }
    public void setProjectiles(Vector<GameEntity> entities) { this.entities = entities; }
    public double getMouseX() { return this.mouseX; }
    public double getMouseY() { return this.mouseY; }
    public static boolean shadersIsEnabled() { return SHADERS; }
    public static void enableShaders(boolean shaders) { SHADERS = shaders; }
    public static boolean isDebugging() { return DEBUGGING; }
    public static void setDebugging(boolean d) { DEBUGGING = d; }
    public Graphics2D getGraphicsContext() { return (Graphics2D) super.getGraphics(); }
    public int getXOffset() { return this.xOffset; }
    public void setXOffset(int xOffset) { this.xOffset = xOffset; }
    public float getFPS() { return this.FPS; }
    public float getAverageFPS() { return this.averageFPS; }
    public double getDesiredTickSpeed() { return this.DESIRED_TICK_SPEED; }
    public double gettickSpeed99thPercent() { return this.tickSpeed99thPercent; }
    public void addAnimation(Animation a) { addPaintableObject(a); } 
    public void addUserThread(Thread t) { userThreads.add(t); }
    public Vector<Thread> getUserThreads() { return this.userThreads; }

    public synchronized static int getNextFreeHashCode() { NEXT_FREE_HASH_CODE++; return NEXT_FREE_HASH_CODE; }

    public void addEntity(GameEntity p) { 
        if(entities.contains(p)) throw new Error("Duplicate Projectile");       
        entities.add(p);           
        addPaintableObject(p);  
        addGameUpdateListener(p);      
    }

    public void addGameMap(GameMap map) { 
        maps.add(map);                       
        map.setLoaded(true);
        this.loadedMap = map;
        addPaintableObject(map);   
        addGameUpdateListener(map);    
    }
    
    private void addPaintableObject(PaintableObject po) { 
        // if(po instanceof Projectile && paintObjectInvoker.getPaintableObjects().contains(po)) throw new Error("Duplicate Projectile");   
        paintObjectInvoker.registerPaintableObject(po); 
    }

    private void addGameUpdateListener(GameUpdateListener gl) { gameUpdateInvoker.registerGameUpdateListener(gl); }
    public void setCamera(Camera c){ this.camera = c; }    
}
